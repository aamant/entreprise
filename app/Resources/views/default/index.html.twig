{% extends 'layout/layout.html.twig' %}

{% block main %}
    <div class="row">
        <div class="col-sm-4">
            <h2 class="text-center">Chiffre d'affaire</h2>
            <canvas id="doughnut"></canvas>
        </div>
        <div class="col-sm-8">
            <h2 class="text-center">Encours</h2>
            <div class="panel panel-stat">
                <!-- Default panel contents -->
                <div class="panel-heading">Devis en cours : {{ wait|number_format(2, ',', '.') }} €</div>

                <!-- Table -->
                <table class="table">
                    <tr>
                        <th>Devis</th>
                        <th>Client</th>
                        <th>Montant</th>
                        <th>Reste à facturer</th>
                    </tr>
                    {% for quotation in quotations %}
                        <tr>
                            <td>{{ quotation.number }}</td>
                            <td>{{ quotation.customer.name }}</td>
                            <td>{{ quotation.total|number_format(2, ',', '.') }} €</td>
                            <td>{{ (quotation.total - quotation.getBilled())|number_format(2, ',', '.') }} €</td>
                        </tr>
                    {% endfor %}
                </table>
            </div>
            <div class="panel panel-stat">
                <!-- Default panel contents -->
                <div class="panel-heading">Facture en cours : {{ paid|number_format(2, ',', '.') }} €</div>

                <!-- Table -->
                <table class="table">
                    <tr>
                        <th>Facture</th>
                        <th>Devis</th>
                        <th>Client</th>
                        <th>Montant</th>
                        <th>Reste à payer</th>
                        <th>&nbsp;</th>
                    </tr>
                    {% for invoice in invoices %}
                        <tr>
                            <td>{{ invoice.number }}</td>
                            <td>{{ invoice.quotation ? invoice.quotation.number : '' }}</td>
                            <td>{{ invoice.customer.name }}</td>
                            <td>{{ invoice.total|number_format(2, ',', '.') }} €</td>
                            <td>{{ (invoice.total - invoice.getPaid())|number_format(2, ',', '.') }} €</td>
                            <td>
                                {% if (date('-1week') > date(invoice.date)) %}
                                    <span class="label label-danger">Retard</span>
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                </table>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <canvas id="recipeByMonth"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <canvas id="recipeAnnualPerMonth"></canvas>
            </div>
        </div>
    </div>
{% endblock %}

{% block script %}
<script>
    Chart.defaults.global.responsive = true;
    Chart.defaults.global.maintainAspectRatio = true;

    var ctx = document.getElementById("doughnut").getContext("2d");
    var Doughnut = new Chart(ctx).Pie({{ doughnut|json_encode|raw }});

    var ctx = document.getElementById("recipeByMonth").getContext("2d");
    var data = {
        labels: ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Aout", "Septembre", "Octobre", "Novembre", "Decembre"],
        datasets: [
            {
                label: "",
                fillColor: "rgba(220,220,220,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                highlightFill: "rgba(220,220,220,0.75)",
                highlightStroke: "rgba(220,220,220,1)",
                data: [{{ recipeByMonth.0|join(', ') }}]
            },
            {
                label: "",
                fillColor: "rgba(151,187,205,0.5)",
                strokeColor: "rgba(151,187,205,0.8)",
                highlightFill: "rgba(151,187,205,0.75)",
                highlightStroke: "rgba(151,187,205,1)",
                data: [{{ recipeByMonth.1|join(', ') }}]
            }
        ]
    };
    var graph1 = new Chart(ctx).Bar(data);

    var ctx = document.getElementById("recipeAnnualPerMonth").getContext("2d");
    var data = {
        labels: ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Aout", "Septembre", "Octobre", "Novembre", "Decembre"],
        datasets: [
            {
                label: "",
                fillColor: "rgba(220,220,220,0.5)",
                strokeColor: "rgba(220,220,220,0.8)",
                highlightFill: "rgba(220,220,220,0.75)",
                highlightStroke: "rgba(220,220,220,1)",
                data: [{{ recipeAnnualPerMonth.0|join(', ') }}]
            },
            {
                label: "",
                fillColor: "rgba(151,187,205,0.5)",
                strokeColor: "rgba(151,187,205,0.8)",
                highlightFill: "rgba(151,187,205,0.75)",
                highlightStroke: "rgba(151,187,205,1)",
                data: [{{ recipeAnnualPerMonth.1|join(', ') }}]
            }
        ]
    };
    Chart.defaults.global.maintainAspectRatio = true;
    var graph1 = new Chart(ctx).Line(data);
</script>
{% endblock %}
